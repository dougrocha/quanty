/* Tslint:disable */
/* eslint-disable */

// ######################################## THIS FILE WAS GENERATED BY MONGOOSE-TSGEN ######################################## //

// NOTE: ANY CHANGES MADE WILL BE OVERWRITTEN ON SUBSEQUENT EXECUTIONS OF MONGOOSE-TSGEN.

import mongoose from 'mongoose'

/**
 * Lean version of guildsDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `guildsDocument.toObject()`. To avoid conflicts with model names, use the type alias `guildsObject`.
 * ```
 * const guildsObject = guilds.toObject();
 * ```
 */
export type guilds = {
  guildId: string
  prefix?: string
  blacklistedWords: string[]
  music: {
    immortal?: boolean
    plugin?: boolean
    musicChannel?: string
  }
  moderation: {
    autoMod?: boolean
    plugin?: boolean
  }
  anime: {
    nsfw?: boolean
    plugin?: boolean
  }
  ticketChannel?: string
  _id: mongoose.Types.ObjectId
  updatedAt?: Date
  createdAt?: Date
}

/**
 * Lean version of guildsDocument (type alias of `guilds`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { guilds } from "../models"
 * import { guildsObject } from "../interfaces/mongoose.gen.ts"
 *
 * const guildsObject: guildsObject = guilds.toObject();
 * ```
 */
export type guildsObject = guilds

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type guildsQuery = mongoose.Query<any, guildsDocument, guildsQueries> &
  guildsQueries

/**
 * Mongoose Query helper types
 *
 * This type represents `guildsSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type guildsQueries = {}

export type guildsMethods = {}

export type guildsStatics = {}

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const guilds = mongoose.model<guildsDocument, guildsModel>("guilds", guildsSchema);
 * ```
 */
export type guildsModel = mongoose.Model<
  guildsDocument,
  guildsQueries,
  guildsMethods
> &
  guildsStatics

/**
 * Mongoose Schema type
 *
 * Assign this type to new guilds schema instances:
 * ```
 * const guildsSchema: guildsSchema = new mongoose.Schema({ ... })
 * ```
 */
export type guildsSchema = mongoose.Schema<
  guildsDocument,
  guildsModel,
  guildsMethods,
  guildsQueries
>

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const guilds = mongoose.model<guildsDocument, guildsModel>("guilds", guildsSchema);
 * ```
 */
export type guildsDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  guildsQueries
> &
  guildsMethods & {
    guildId: string
    prefix?: string
    blacklistedWords: mongoose.Types.Array<string>
    music: {
      immortal?: boolean
      plugin?: boolean
      musicChannel?: string
    }
    moderation: {
      autoMod?: boolean
      plugin?: boolean
    }
    anime: {
      nsfw?: boolean
      plugin?: boolean
    }
    ticketChannel?: string
    _id: mongoose.Types.ObjectId
    updatedAt?: Date
    createdAt?: Date
  }

/**
 * Lean version of userGuildInventoryDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `userGuildDocument.toObject()`.
 * ```
 * const userguildObject = userguild.toObject();
 * ```
 */
export type userGuildInventory = {
  name?: string
  price?: number
  rarity?: string
  _id: mongoose.Types.ObjectId
}

/**
 * Lean version of userGuildDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `userGuildDocument.toObject()`. To avoid conflicts with model names, use the type alias `userGuildObject`.
 * ```
 * const userguildObject = userguild.toObject();
 * ```
 */
export type userGuild = {
  userId: string
  guildId: string
  inventory: userGuildInventory[]
  wallet?: number
  bank?: number
  job?: string
  level?: number
  _id: mongoose.Types.ObjectId
}

/**
 * Lean version of userGuildDocument (type alias of `userGuild`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { userGuild } from "../models"
 * import { userGuildObject } from "../interfaces/mongoose.gen.ts"
 *
 * const userguildObject: userGuildObject = userguild.toObject();
 * ```
 */
export type userGuildObject = userGuild

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type userGuildQuery = mongoose.Query<
  any,
  userGuildDocument,
  userGuildQueries
> &
  userGuildQueries

/**
 * Mongoose Query helper types
 *
 * This type represents `userGuildSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type userGuildQueries = {}

export type userGuildMethods = {}

export type userGuildStatics = {}

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const userGuild = mongoose.model<userGuildDocument, userGuildModel>("userGuild", userGuildSchema);
 * ```
 */
export type userGuildModel = mongoose.Model<
  userGuildDocument,
  userGuildQueries,
  userGuildMethods
> &
  userGuildStatics

/**
 * Mongoose Schema type
 *
 * Assign this type to new userGuild schema instances:
 * ```
 * const userGuildSchema: userGuildSchema = new mongoose.Schema({ ... })
 * ```
 */
export type userGuildSchema = mongoose.Schema<
  userGuildDocument,
  userGuildModel,
  userGuildMethods,
  userGuildQueries
>

/**
 * Mongoose Subdocument type
 *
 * Type of `userGuildDocument["inventory"]` element.
 */
export type userGuildInventoryDocument = mongoose.Types.Subdocument & {
  name?: string
  price?: number
  rarity?: string
  _id: mongoose.Types.ObjectId
}

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const userGuild = mongoose.model<userGuildDocument, userGuildModel>("userGuild", userGuildSchema);
 * ```
 */
export type userGuildDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  userGuildQueries
> &
  userGuildMethods & {
    userId: string
    guildId: string
    inventory: mongoose.Types.DocumentArray<userGuildInventoryDocument>
    wallet?: number
    bank?: number
    job?: string
    level?: number
    _id: mongoose.Types.ObjectId
  }

/**
 * Lean version of userLogsWarningDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `userLogsDocument.toObject()`.
 * ```
 * const userlogsObject = userlogs.toObject();
 * ```
 */
export type userLogsWarning = {
  moderator?: string
  reason?: string
  issueDate?: Date
  _id: mongoose.Types.ObjectId
}

/**
 * Lean version of userLogsDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `userLogsDocument.toObject()`. To avoid conflicts with model names, use the type alias `userLogsObject`.
 * ```
 * const userlogsObject = userlogs.toObject();
 * ```
 */
export type userLogs = {
  userId: string
  guildId?: string
  infractions?: number
  warnings: userLogsWarning[]
  _id: mongoose.Types.ObjectId
}

/**
 * Lean version of userLogsDocument (type alias of `userLogs`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { userLogs } from "../models"
 * import { userLogsObject } from "../interfaces/mongoose.gen.ts"
 *
 * const userlogsObject: userLogsObject = userlogs.toObject();
 * ```
 */
export type userLogsObject = userLogs

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type userLogsQuery = mongoose.Query<
  any,
  userLogsDocument,
  userLogsQueries
> &
  userLogsQueries

/**
 * Mongoose Query helper types
 *
 * This type represents `userLogsSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type userLogsQueries = {}

export type userLogsMethods = {}

export type userLogsStatics = {}

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const userLogs = mongoose.model<userLogsDocument, userLogsModel>("userLogs", userLogsSchema);
 * ```
 */
export type userLogsModel = mongoose.Model<
  userLogsDocument,
  userLogsQueries,
  userLogsMethods
> &
  userLogsStatics

/**
 * Mongoose Schema type
 *
 * Assign this type to new userLogs schema instances:
 * ```
 * const userLogsSchema: userLogsSchema = new mongoose.Schema({ ... })
 * ```
 */
export type userLogsSchema = mongoose.Schema<
  userLogsDocument,
  userLogsModel,
  userLogsMethods,
  userLogsQueries
>

/**
 * Mongoose Subdocument type
 *
 * Type of `userLogsDocument["warnings"]` element.
 */
export type userLogsWarningDocument = mongoose.Types.Subdocument & {
  moderator?: string
  reason?: string
  issueDate?: Date
  _id: mongoose.Types.ObjectId
}

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const userLogs = mongoose.model<userLogsDocument, userLogsModel>("userLogs", userLogsSchema);
 * ```
 */
export type userLogsDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  userLogsQueries
> &
  userLogsMethods & {
    userId: string
    guildId?: string
    infractions?: number
    warnings: mongoose.Types.DocumentArray<userLogsWarningDocument>
    _id: mongoose.Types.ObjectId
  }

/**
 * Lean version of userDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `userDocument.toObject()`. To avoid conflicts with model names, use the type alias `userObject`.
 * ```
 * const userObject = user.toObject();
 * ```
 */
export type user = {
  userId: string
  pets: string[]
  premium?: boolean
  premiumSince?: string
  language?: string
  _id: mongoose.Types.ObjectId
}

/**
 * Lean version of userDocument (type alias of `user`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { user } from "../models"
 * import { userObject } from "../interfaces/mongoose.gen.ts"
 *
 * const userObject: userObject = user.toObject();
 * ```
 */
export type userObject = user

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type userQuery = mongoose.Query<any, userDocument, userQueries> &
  userQueries

/**
 * Mongoose Query helper types
 *
 * This type represents `userSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type userQueries = {}

export type userMethods = {}

export type userStatics = {}

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const user = mongoose.model<userDocument, userModel>("user", userSchema);
 * ```
 */
export type userModel = mongoose.Model<userDocument, userQueries, userMethods> &
  userStatics

/**
 * Mongoose Schema type
 *
 * Assign this type to new user schema instances:
 * ```
 * const userSchema: userSchema = new mongoose.Schema({ ... })
 * ```
 */
export type userSchema = mongoose.Schema<
  userDocument,
  userModel,
  userMethods,
  userQueries
>

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const user = mongoose.model<userDocument, userModel>("user", userSchema);
 * ```
 */
export type userDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  userQueries
> &
  userMethods & {
    userId: string
    pets: mongoose.Types.Array<string>
    premium?: boolean
    premiumSince?: string
    language?: string
    _id: mongoose.Types.ObjectId
  }

/**
 * Check if a property on a document is populated:
 * ```
 * import { IsPopulated } from "../interfaces/mongoose.gen.ts"
 *
 * if (IsPopulated<UserDocument["bestFriend"]>) { ... }
 * ```
 */
export function IsPopulated<T>(doc: T | mongoose.Types.ObjectId): doc is T {
  return doc instanceof mongoose.Document
}

/**
 * Helper type used by `PopulatedDocument`. Returns the parent property of a string
 * representing a nested property (i.e. `friend.user` -> `friend`)
 */
type ParentProperty<T> = T extends `${infer P}.${string}` ? P : never

/**
 * Helper type used by `PopulatedDocument`. Returns the child property of a string
 * representing a nested property (i.e. `friend.user` -> `user`).
 */
type ChildProperty<T> = T extends `${string}.${infer C}` ? C : never

/**
 * Helper type used by `PopulatedDocument`. Removes the `ObjectId` from the general union type generated
 * for ref documents (i.e. `mongoose.Types.ObjectId | UserDocument` -> `UserDocument`)
 */
type PopulatedProperty<Root, T extends keyof Root> = Omit<Root, T> & {
  [ref in T]: Root[T] extends mongoose.Types.Array<infer U>
    ? mongoose.Types.Array<Exclude<U, mongoose.Types.ObjectId>>
    : Exclude<Root[T], mongoose.Types.ObjectId>
}

/**
 * Populate properties on a document type:
 * ```
 * import { PopulatedDocument } from "../interfaces/mongoose.gen.ts"
 *
 * function example(user: PopulatedDocument<UserDocument, "bestFriend">) {
 *   console.log(user.bestFriend._id) // typescript knows this is populated
 * }
 * ```
 */
export type PopulatedDocument<DocType, T> = T extends keyof DocType
  ? PopulatedProperty<DocType, T>
  : ParentProperty<T> extends keyof DocType
  ? Omit<DocType, ParentProperty<T>> & {
      [ref in ParentProperty<T>]: DocType[ParentProperty<T>] extends mongoose.Types.Array<
        infer U
      >
        ? mongoose.Types.Array<
            ChildProperty<T> extends keyof U
              ? PopulatedProperty<U, ChildProperty<T>>
              : PopulatedDocument<U, ChildProperty<T>>
          >
        : ChildProperty<T> extends keyof DocType[ParentProperty<T>]
        ? PopulatedProperty<DocType[ParentProperty<T>], ChildProperty<T>>
        : PopulatedDocument<DocType[ParentProperty<T>], ChildProperty<T>>
    }
  : DocType

/**
 * Helper types used by the populate overloads
 */
type Unarray<T> = T extends Array<infer U> ? U : T
type Modify<T, R> = Omit<T, keyof R> & R

/**
 * Augment mongoose with Query.populate overloads
 */
declare module 'mongoose' {
  interface Query<ResultType, DocType extends Document, THelpers = {}> {
    populate<T extends string>(
      path: T,
      select?: string | any,
      model?: string | Model<any, THelpers>,
      match?: any,
    ): Query<
      ResultType extends Array<DocType>
        ? Array<PopulatedDocument<Unarray<ResultType>, T>>
        : ResultType extends DocType
        ? PopulatedDocument<Unarray<ResultType>, T>
        : ResultType,
      DocType,
      THelpers
    > &
      THelpers

    populate<T extends string>(
      options: Modify<PopulateOptions, { path: T }> | Array<PopulateOptions>,
    ): Query<
      ResultType extends Array<DocType>
        ? Array<PopulatedDocument<Unarray<ResultType>, T>>
        : ResultType extends DocType
        ? PopulatedDocument<Unarray<ResultType>, T>
        : ResultType,
      DocType,
      THelpers
    > &
      THelpers
  }
}
