# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Channel {
  application_id: String
  bitrate: Int
  guild_id: String
  icon: String
  id: String!
  last_message_id: String
  last_pin_timestamp: String
  member: ThreadMember
  member_count: Int
  message_count: Int
  name: String
  nsfw: Boolean
  owner_id: String
  parent_id: String
  permission_overwrites: [OverWrite!]
  position: Float
  rate_limit_per_user: Int
  recipients: [DiscordUser!]
  rtc_region: String
  thread_metadata: ThreadMetaData
  topic: String
  user_limit: Int
}

type Customer {
  _count: CustomerCount!
  createdAt: DateTime!
  email: String
  id: ID!
  subscription: [Subscription!]
  subscriptionId: Boolean!
  user: User
  userId: String
}

type CustomerCount {
  subscription: Int!
}

type CustomerCountAggregate {
  _all: Int!
  createdAt: Int!
  email: Int!
  id: Int!
  subscriptionId: Int!
  userId: Int!
}

type CustomerMaxAggregate {
  createdAt: DateTime
  email: String
  id: String
  subscriptionId: Boolean
  userId: String
}

type CustomerMinAggregate {
  createdAt: DateTime
  email: String
  id: String
  subscriptionId: Boolean
  userId: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DiscordGuild {
  afk_timeout: Int
  bot: Boolean
  channels: [Channel!]
  description: String
  emojis: [Emojis!]
  features: [String!]
  icon: String
  id: String!
  member_count: Float
  members: GuildMember
  name: String!
  nsfw_level: Float
  owner: Boolean
  owner_id: String!
  permissions: String
  preferred_locale: String
  premium_tier: Float
  roles: [Roles!]
  stickers: [Sticker!]
  threads: [Channel!]
  unavailable: Boolean
}

type DiscordUser {
  accent_color: Float
  avatar: String!
  banner: String
  bot: Boolean
  discriminator: String!
  email: String
  flags: Float
  id: String!
  locale: String
  mfa_enabled: Boolean
  premium_type: Float
  public_flags: Float
  system: Boolean
  username: String!
  verified: Boolean
}

type Emojis {
  animated: Boolean
  available: Boolean
  id: String!
  managed: Boolean
  name: String!
  require_colons: Boolean
  roles: [String!]
  user: DiscordUser
}

type Guild {
  guildPlugins: GuildPlugins
  guildSettings: GuildSettings
  id: ID!
  prefix: String!
  subscription: Subscription
  tier: Guild_tier!
}

type GuildCountAggregate {
  _all: Int!
  id: Int!
  prefix: Int!
  tier: Int!
}

type GuildMaxAggregate {
  id: String
  prefix: String
  tier: Guild_tier
}

type GuildMember {
  avatar: String
  deaf: Boolean!
  joined_at: String!
  mute: Boolean!
  nick: String
  pending: Boolean
  premium_since: String
  roles: [String!]!
  user: DiscordUser
}

type GuildMinAggregate {
  id: String
  prefix: String
  tier: Guild_tier
}

type GuildPlugins {
  anime: Boolean!
  autoMod: Boolean!
  guild: Guild!
  id: ID!
}

type GuildPluginsCountAggregate {
  _all: Int!
  anime: Int!
  autoMod: Int!
  id: Int!
}

type GuildPluginsMaxAggregate {
  anime: Boolean
  autoMod: Boolean
  id: String
}

type GuildPluginsMinAggregate {
  anime: Boolean
  autoMod: Boolean
  id: String
}

type GuildSettings {
  defaultJoinRole: String!
  djRole: String!
  globalCooldown: Int!
  guild: Guild
  id: ID!
  musicTimeOut: Boolean!
  nsfw: Boolean!
}

type GuildSettingsAvgAggregate {
  globalCooldown: Float
}

type GuildSettingsCountAggregate {
  _all: Int!
  defaultJoinRole: Int!
  djRole: Int!
  globalCooldown: Int!
  id: Int!
  musicTimeOut: Int!
  nsfw: Int!
}

type GuildSettingsMaxAggregate {
  defaultJoinRole: String
  djRole: String
  globalCooldown: Int
  id: String
  musicTimeOut: Boolean
  nsfw: Boolean
}

type GuildSettingsMinAggregate {
  defaultJoinRole: String
  djRole: String
  globalCooldown: Int
  id: String
  musicTimeOut: Boolean
  nsfw: Boolean
}

type GuildSettingsSumAggregate {
  globalCooldown: Int
}

enum Guild_tier {
  FREE
  QUANTUM
  SILVER
}

"""Mutual Guilds. Guilds that a user can edit"""
type MutualGuild {
  bot: Boolean!
  icon: String
  id: String!
  name: String!
}

type OverWrite {
  allow: String!
  deny: String!
  id: String!
}

type Price {
  _count: PriceCount!
  currency: String!
  id: ID!
  product: Product!
  productId: String!
  recurringInterval: DateTime!
  subscription: [Subscription!]
  unit_amount: Int!
}

type PriceAvgAggregate {
  unit_amount: Float
}

type PriceCount {
  subscription: Int!
}

type PriceCountAggregate {
  _all: Int!
  currency: Int!
  id: Int!
  productId: Int!
  recurringInterval: Int!
  unit_amount: Int!
}

type PriceMaxAggregate {
  currency: String
  id: String
  productId: String
  recurringInterval: DateTime
  unit_amount: Int
}

type PriceMinAggregate {
  currency: String
  id: String
  productId: String
  recurringInterval: DateTime
  unit_amount: Int
}

type PriceSumAggregate {
  unit_amount: Int
}

type Product {
  _count: ProductCount!
  description: String
  id: ID!
  name: String!
  price: [Price!]
  tier: Product_tier!
}

type ProductCount {
  price: Int!
}

type ProductCountAggregate {
  _all: Int!
  description: Int!
  id: Int!
  name: Int!
  tier: Int!
}

type ProductMaxAggregate {
  description: String
  id: String
  name: String
  tier: Product_tier
}

type ProductMinAggregate {
  description: String
  id: String
  name: String
  tier: Product_tier
}

enum Product_tier {
  FREE
  QUANTUM
  SILVER
}

type Query {
  guildConfig(guildId: String!): Guild!
  guilds(guildId: String!): DiscordGuild!

  """Returns the user that is logged in the session"""
  me: User

  """Gets the available guilds that the user can edit."""
  mutualGuilds: [MutualGuild!]!
}

type RoleTags {
  bot_id: String
  integration_id: String
}

type Roles {
  color: Float!
  hoist: Boolean!
  icon: String
  id: String!
  managed: Boolean!
  mentionable: Boolean!
  name: String!
  permissions: String!
  position: Float!
  tags: RoleTags
  unicode_emoji: String
}

type Sticker {
  asset: String!
  available: Boolean
  description: String!
  format_type: Float!
  guild_id: String
  id: String
  name: String!
  pack_id: String
  sort_value: Float
  tags: String!
  type: Float!
  user: DiscordUser
}

type Subscription {
  cancel_at_period_end: Boolean!
  current_period_end: DateTime!
  customer: Customer!
  customerId: String!
  guild: Guild!
  guildId: String!
  id: ID!
  price: Price!
  priceId: String!
  status: Subscription_status!
  tier: Subscription_tier!
}

type SubscriptionCountAggregate {
  _all: Int!
  cancel_at_period_end: Int!
  current_period_end: Int!
  customerId: Int!
  guildId: Int!
  id: Int!
  priceId: Int!
  status: Int!
  tier: Int!
}

type SubscriptionMaxAggregate {
  cancel_at_period_end: Boolean
  current_period_end: DateTime
  customerId: String
  guildId: String
  id: String
  priceId: String
  status: Subscription_status
  tier: Subscription_tier
}

type SubscriptionMinAggregate {
  cancel_at_period_end: Boolean
  current_period_end: DateTime
  customerId: String
  guildId: String
  id: String
  priceId: String
  status: Subscription_status
  tier: Subscription_tier
}

enum Subscription_status {
  ACTIVE
  CANCELED
  INCOMPLETE
}

enum Subscription_tier {
  FREE
  QUANTUM
  SILVER
}

type ThreadMember {
  id: String
  join_timestamp: String!
  user_id: String
}

type ThreadMetaData {
  archive_timestamp: String!
  archived: Boolean!
  invitable: Boolean
  locked: Boolean
}

type User {
  acceptedTermsAndConditions: Boolean!
  avatar: String
  createdAt: DateTime!
  customer: Customer
  discriminator: String!
  email: String
  id: ID!
  locale: String
  username: String!
}

type UserCountAggregate {
  _all: Int!
  acceptedTermsAndConditions: Int!
  avatar: Int!
  createdAt: Int!
  discriminator: Int!
  email: Int!
  id: Int!
  locale: Int!
  username: Int!
}

type UserMaxAggregate {
  acceptedTermsAndConditions: Boolean
  avatar: String
  createdAt: DateTime
  discriminator: String
  email: String
  id: String
  locale: String
  username: String
}

type UserMinAggregate {
  acceptedTermsAndConditions: Boolean
  avatar: String
  createdAt: DateTime
  discriminator: String
  email: String
  id: String
  locale: String
  username: String
}