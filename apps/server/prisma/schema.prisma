// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

generator nestgraphql {
  provider               = "prisma-nestjs-graphql"
  output                 = "../src/@generated/prisma-nestjs-graphql"
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
  reExport               = Single
  noTypeId               = True
}

model Customer {
  id             String   @id @unique @db.VarChar(255)
  /// @Validator.IsEmail()
  email          String?  @unique @db.VarChar(255)
  subscriptionId Boolean  @default(false)
  createdAt      DateTime @default(now())

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique @db.VarChar(18)

  subscription Subscription[]

  @@index([userId])
}

model Guild {
  id     String     @id @unique @db.VarChar(18)
  tier   Guild_tier @default(FREE)
  prefix String     @default("q!") @db.VarChar(10)

  subscription  Subscription?
  guildSettings GuildSettings?
  guildPlugins  GuildPlugins?
}

model GuildPlugins {
  id      String  @id @unique @db.VarChar(18)
  autoMod Boolean @default(false)
  anime   Boolean @default(false)

  guild Guild @relation(fields: [id], references: [id])
}

model GuildSettings {
  id              String  @id @unique @db.VarChar(18)
  defaultJoinRole String  @db.VarChar(18)
  nsfw            Boolean @default(false)
  globalCooldown  Int     @default(0)
  djRole          String  @db.VarChar(18)
  musicTimeOut    Boolean @default(false)

  guild Guild? @relation(fields: [id], references: [id])
}

model Price {
  id                String   @id @unique @db.VarChar(255)
  recurringInterval DateTime
  unit_amount       Int
  currency          String   @db.VarChar(4)

  product   Product @relation(fields: [productId], references: [id])
  productId String

  subscription Subscription[]

  @@index([productId])
}

model Product {
  id          String       @id @unique @db.VarChar(255)
  name        String       @db.VarChar(50)
  description String?      @db.VarChar(350)
  tier        Product_tier
  price       Price[]
}

model Subscription {
  id                   String              @id @unique @db.VarChar(255)
  tier                 Subscription_tier   @default(FREE)
  status               Subscription_status @default(CANCELED)
  current_period_end   DateTime
  cancel_at_period_end Boolean             @default(false)

  guild   Guild  @relation(fields: [guildId], references: [id])
  guildId String @unique @db.VarChar(18)

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String   @db.VarChar(255)

  price   Price  @relation(fields: [priceId], references: [id])
  priceId String @db.VarChar(255)

  @@index([guildId])
  @@index([customerId])
  @@index([priceId])
}

model User {
  id            String   @id @unique @db.VarChar(18)
  username      String   @db.VarChar(32)
  discriminator String   @db.Char(4)
  /// @Validator.IsEmail()
  email         String?  @unique @db.VarChar(254)
  avatar        String?  @db.VarChar(254)
  createdAt     DateTime @default(now())
  locale        String?  @db.VarChar(10)

  /// @HideField()
  accessToken  String? @db.VarChar(100)
  /// @HideField()
  refreshToken String? @db.VarChar(100)

  acceptedTermsAndConditions Boolean @default(false)

  customer Customer?
}

enum Guild_tier {
  FREE
  SILVER
  QUANTUM
}

enum Product_tier {
  FREE
  SILVER
  QUANTUM
}

enum Subscription_tier {
  FREE
  SILVER
  QUANTUM
}

enum Subscription_status {
  ACTIVE
  CANCELED
  INCOMPLETE
}

// type GuildsAnime {
//   nsfw   Boolean
//   plugin Boolean
// }

// type GuildsModeration {
//   autoMod Boolean
//   plugin  Boolean
// }

// type GuildsMusic {
//   immortal Boolean
//   plugin   Boolean
// }

// model guildbanlogs {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
// }

// model guildcommands {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
// }

// model guildlogs {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
// }

// model guildplugins {
//   id                      String   @id @default(auto()) @map("_id") @db.ObjectId
//   v                       Int      @map("__v")
//   autoMod                 Boolean
//   blacklistedWords        String[]
//   /// Could not determine type: the field only had null or empty values in the sample set.
//   channel                 Json?
//   createdAt               DateTime @db.Date
//   defaultGlobalCooldown   Int
//   /// Could not determine type: the field only had null or empty values in the sample set.
//   djRole                  Json?
//   guildId                 String   @unique(map: "guildId_1")
//   immortal                Boolean
//   nsfw                    Boolean
//   /// Could not determine type: the field only had null or empty values in the sample set.
//   nsfwChannel             Json?
//   plugins                 String[]
//   ticketCategory          String
//   ticketTranscriptChannel String
//   updatedAt               DateTime @db.Date
// }

// model guilds {
//   id               String            @id @default(auto()) @map("_id") @db.ObjectId
//   v                Int               @map("__v")
//   anime            GuildsAnime?
//   /// Could not determine type: the field only had null or empty values in the sample set.
//   banLogs          Json?
//   blacklistedWords String[]
//   createdAt        DateTime          @db.Date
//   guildId          String            @unique(map: "guildId_1")
//   /// Could not determine type: the field only had null or empty values in the sample set.
//   logs             Json?
//   maxTickets       Int?
//   moderation       GuildsModeration?
//   music            GuildsMusic?
//   plugins          String?           @db.ObjectId
//   prefix           String
//   premium          String?
//   tickets          String[]          @db.ObjectId
//   updatedAt        DateTime          @db.Date
// }

// model guildsTest {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
// }

// model guildstests {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
// }

// model guildtickets {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   v         Int      @map("__v")
//   channelId String
//   closed    Boolean
//   guildId   String
//   issuedOn  DateTime @db.Date
//   locked    Boolean
//   memberId  String
//   ticketId  String
//   type      String
// }

// model userguilds {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
// }

// model userlogs {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
// }

// model users {
//   id            String  @id @default(auto()) @map("_id") @db.ObjectId
//   v             Int     @map("__v")
//   accessToken   String
//   avatar        String
//   discordId     String
//   discriminator String
//   email         String  @unique(map: "email_1")
//   locale        String
//   refreshToken  String
//   stripeId      String  @unique(map: "stripeId_1")
//   username      String
//   verified      Boolean

//   @@index([discordId], map: "discordId_1")
// }
